import React, { Component } from 'react';
import { Form, Button } from 'react-bootstrap';

export class Upload extends Component {
	constructor(props) {
		super(props);
		this.handleSubmit = this.handleSubmit.bind(this);
		this.fileRef = React.createRef();
		this.noRef = React.createRef();
		this.locationRef = React.createRef();
		this.state = { loading: false };
	}

	render() {
		return (
			<div className="upload">
				<Form onSubmit={this.handleSubmit}>
					<Form.Group controlId="file">
						<Form.Label>Run Log File</Form.Label>
						<Form.Control type="file" required ref={this.fileRef} />
						<Form.Text className="text-muted">
							Files should be generated by canparser version 2 or later.
						</Form.Text>
					</Form.Group>
					<Form.Group controlId="runno">
						<Form.Label>Run Number Of Day</Form.Label>
						<Form.Control type="number" placeholder="1" required ref={this.noRef} />
					</Form.Group>
					<Form.Group controlId="location">
						<Form.Label>Location</Form.Label>
						<Form.Control type="text" placeholder="Race Track" required ref={this.locationRef} />
					</Form.Group>
					<Button variant="primary" type="submit" disabled={this.state.loading}>
						Submit
					</Button>
				</Form>
			</div>
		);
	}

	handleSubmit(event) {
		if (this.state.loading) return;
		let file = this.fileRef.current.files[0];
		let formData = new FormData();
		// upload file and other metadata
		formData.append('file', file);
		formData.append('runofday', this.noRef.current.value);
		formData.append('location', this.locationRef.current.value);
		this.setState({ loading: true });
		event.persist();
		fetch(process.env.REACT_APP_API_SERVER + "/api/runs", {
			method: "POST",
			body: formData
		})
			.then(response => {
				if (response.status === 201) {
					return response.json()
				} else {
					throw response.text()
				}
			})
			// jump to run page if successful
			.then(result => this.props.onOpenRun(result.id))
			// set an error message on the page if failed
			.catch(error => {
				this.setState({ loading: false });
				this.fileRef.current.setCustomValidity(error);
				event.target.reportValidity();
			});

	}
}

export default Upload;